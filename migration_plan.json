{
  "projectStructure": {
    "root": "python_api",
    "folders": {
      "api": {
        "description": "Contains API endpoint handlers"
      },
      "data": {
        "description": "Contains data storage modules"
      }
    },
    "files": {
      "main.py": "Main entry point and router",
      "api/get.py": "GET endpoint handler",
      "api/post.py": "POST endpoint handler",
      "api/put.py": "PUT endpoint handler",
      "api/delete.py": "DELETE endpoint handler",
      "data/storage.py": "Data storage module",
      "requirements.txt": "Project dependencies"
    }
  },
  "dependencies": [
    "flask==2.0.1",
    "python-dotenv==0.19.0"
  ],
  "codeConversion": {
    "temp_extract/Php/data/data.php": {
      "target": "python_api/data/storage.py",
      "code": "data = {\n    1: {'id': 1, 'name': 'Item 1', 'description': 'Description of Item 1'},\n    2: {'id': 2, 'name': 'Item 2', 'description': 'Description of Item 2'}\n}"
    },
    "temp_extract/Php/index.php": {
      "target": "python_api/main.py",
      "code": "from flask import Flask, request, jsonify\nfrom api import get, post, put, delete\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST', 'PUT', 'DELETE'])\ndef handle_request():\n    if request.method == 'GET':\n        return get.handle()\n    elif request.method == 'POST':\n        return post.handle()\n    elif request.method == 'PUT':\n        return put.handle()\n    elif request.method == 'DELETE':\n        return delete.handle()\n    else:\n        return jsonify({'message': 'Method not allowed'}), 405\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    "temp_extract/Php/api/get.php": {
      "target": "python_api/api/get.py",
      "code": "from flask import request, jsonify\nfrom data.storage import data\n\ndef handle():\n    id = request.args.get('id')\n    if id:\n        id = int(id)\n        if id in data:\n            return jsonify(data[id])\n        return jsonify({'message': 'Item not found'}), 404\n    return jsonify(list(data.values()))"
    },
    "temp_extract/Php/api/post.php": {
      "target": "python_api/api/post.py",
      "code": "from flask import request, jsonify\nfrom data.storage import data\n\ndef handle():\n    input_data = request.get_json()\n    id = len(data) + 1\n    data[id] = {\n        'id': id,\n        'name': input_data['name'],\n        'description': input_data['description']\n    }\n    return jsonify(data[id])"
    },
    "temp_extract/Php/api/put.php": {
      "target": "python_api/api/put.py",
      "code": "from flask import request, jsonify\nfrom data.storage import data\n\ndef handle():\n    input_data = request.get_json()\n    id = request.args.get('id')\n    \n    if not id:\n        return jsonify({'message': 'ID is required'}), 400\n        \n    id = int(id)\n    if id not in data:\n        return jsonify({'message': 'Item not found'}), 404\n        \n    data[id]['name'] = input_data.get('name', data[id]['name'])\n    data[id]['description'] = input_data.get('description', data[id]['description'])\n    \n    return jsonify(data[id])"
    },
    "temp_extract/Php/api/delete.php": {
      "target": "python_api/api/delete.py",
      "code": "from flask import request, jsonify\nfrom data.storage import data\n\ndef handle():\n    id = request.args.get('id')\n    \n    if not id:\n        return jsonify({'message': 'ID is required'}), 400\n        \n    id = int(id)\n    if id not in data:\n        return jsonify({'message': 'Item not found'}), 404\n        \n    del data[id]\n    return jsonify({'message': 'Item deleted'})"
    }
  }
}